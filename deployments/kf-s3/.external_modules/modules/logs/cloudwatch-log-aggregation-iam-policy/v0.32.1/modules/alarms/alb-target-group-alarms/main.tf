terraform {
  # This module is now only being tested with Terraform 1.1.x. However, to make upgrading easier, we are setting 1.0.0 as the minimum version.
  required_version = ">= 1.0.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "< 4.0"
    }
  }
}

# ----------------------------------------------------------------------------------------------------------------------
# CREATE CLOUDWATCH ALARMS FOR ALB TARGET GROUP METRICS
# For detailed explanations of these metrics, see:
# http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/elb-metricscollected.html#load-balancer-metrics-alb
# ----------------------------------------------------------------------------------------------------------------------

# HealthyHostCount
# - The most useful statistics are Average, Minimum, and Maximum.
resource "aws_cloudwatch_metric_alarm" "tg_low_healthy_host_count" {
  # Only create this alarm if var.tg_low_healthy_host_count_threshold is greater than 0.
  count             = var.create_resources && var.tg_low_healthy_host_count_threshold > 0 ? 1 : 0
  alarm_name        = "${var.target_group_name}-low-healthy-host-count"
  alarm_description = "An alarm that goes off if the number of healthy targets in the Target Group ${var.target_group_name} goes below the threshold."
  namespace         = "AWS/ApplicationELB"
  metric_name       = "HealthyHostCount"
  dimensions = {
    LoadBalancer = local.load_balancer_dimension_value
    TargetGroup  = local.target_group_dimension_value
  }
  comparison_operator       = "LessThanThreshold"
  evaluation_periods        = var.tg_low_healthy_host_count_evaluation_periods
  period                    = var.tg_low_healthy_host_count_period
  datapoints_to_alarm       = var.tg_low_healthy_host_count_datapoints_to_alarm == null ? var.tg_low_healthy_host_count_evaluation_periods : var.tg_low_healthy_host_count_datapoints_to_alarm
  statistic                 = "Maximum"
  threshold                 = var.tg_low_healthy_host_count_threshold
  unit                      = "Count"
  alarm_actions             = var.alarm_sns_topic_arns
  ok_actions                = var.alarm_sns_topic_arns
  insufficient_data_actions = var.alarm_sns_topic_arns
  treat_missing_data        = var.tg_low_healthy_host_count_treat_missing_data
  tags                      = var.tags
}

# HTTPCode_Target_4XX_Count
# - The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.
resource "aws_cloudwatch_metric_alarm" "tg_high_http_code_target_4xx_count" {
  # Only create this alarm if var.tg_high_http_code_target_4xx_count_threshold is greater than 0.
  count             = var.create_resources && var.tg_high_http_code_target_4xx_count_threshold > 0 ? 1 : 0
  alarm_name        = "${var.target_group_name}-high-http-code-target-4xx-count"
  alarm_description = "An alarm that goes off if the number of HTTP 4XX response codes generated by the targets in Target Group ${var.target_group_name} exceeds the threshold. This does not include any response codes generated by the load balancer."
  namespace         = "AWS/ApplicationELB"
  metric_name       = "HTTPCode_Target_4XX_Count"
  dimensions = {
    LoadBalancer = local.load_balancer_dimension_value
    TargetGroup  = local.target_group_dimension_value
  }
  comparison_operator       = "GreaterThanThreshold"
  evaluation_periods        = var.tg_high_http_code_target_4xx_count_evaluation_periods
  period                    = var.tg_high_http_code_target_4xx_count_period
  datapoints_to_alarm       = var.tg_high_http_code_target_4xx_count_datapoints_to_alarm == null ? var.tg_high_http_code_target_4xx_count_evaluation_periods : var.tg_high_http_code_target_4xx_count_datapoints_to_alarm
  statistic                 = "Sum"
  threshold                 = var.tg_high_http_code_target_4xx_count_threshold
  unit                      = "Count"
  alarm_actions             = var.alarm_sns_topic_arns
  ok_actions                = var.alarm_sns_topic_arns
  insufficient_data_actions = var.alarm_sns_topic_arns
  treat_missing_data        = var.tg_high_http_code_target_4xx_count_treat_missing_data
  tags                      = var.tags
}

# HTTPCode_Target_5XX_Count
# - The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.
resource "aws_cloudwatch_metric_alarm" "tg_high_http_code_target_5xx_count" {
  # Only create this alarm if var.tg_high_http_code_target_5xx_count_threshold is greater than 0.
  count             = var.create_resources && var.tg_high_http_code_target_5xx_count_threshold > 0 ? 1 : 0
  alarm_name        = "${var.target_group_name}-high-http-code-target-5xx-count"
  alarm_description = "An alarm that goes off if the number of HTTP 5XX response codes generated by the targets in Target Group ${var.target_group_name} exceeds the threshold. This does not include any response codes generated by the load balancer."
  namespace         = "AWS/ApplicationELB"
  metric_name       = "HTTPCode_Target_5XX_Count"
  dimensions = {
    LoadBalancer = local.load_balancer_dimension_value
    TargetGroup  = local.target_group_dimension_value
  }
  comparison_operator       = "GreaterThanThreshold"
  evaluation_periods        = var.tg_high_http_code_target_5xx_count_evaluation_periods
  period                    = var.tg_high_http_code_target_5xx_count_period
  datapoints_to_alarm       = var.tg_high_http_code_target_5xx_count_datapoints_to_alarm == null ? var.tg_high_http_code_target_5xx_count_evaluation_periods : var.tg_high_http_code_target_5xx_count_datapoints_to_alarm
  statistic                 = "Sum"
  threshold                 = var.tg_high_http_code_target_5xx_count_threshold
  unit                      = "Count"
  alarm_actions             = var.alarm_sns_topic_arns
  ok_actions                = var.alarm_sns_topic_arns
  insufficient_data_actions = var.alarm_sns_topic_arns
  treat_missing_data        = var.tg_high_http_code_target_5xx_count_treat_missing_data
  tags                      = var.tags
}

# RequestCount
# - The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.
resource "aws_cloudwatch_metric_alarm" "tg_high_request_count" {
  # Only create this alarm if var.tg_high_request_count_threshold is greater than 0.
  count             = var.create_resources && var.tg_high_request_count_threshold > 0 ? 1 : 0
  alarm_name        = "${var.target_group_name}-high-request-count"
  alarm_description = "An alarm that goes off if the number of requests received by the Target Group ${var.target_group_name} goes above the threshold."
  namespace         = "AWS/ApplicationELB"
  metric_name       = "RequestCount"
  dimensions = {
    LoadBalancer = local.load_balancer_dimension_value
    TargetGroup  = local.target_group_dimension_value
  }
  comparison_operator       = "GreaterThanThreshold"
  evaluation_periods        = var.tg_high_request_count_evaluation_periods
  period                    = var.tg_high_request_count_period
  datapoints_to_alarm       = var.tg_high_request_count_datapoints_to_alarm == null ? var.tg_high_request_count_evaluation_periods : var.tg_high_request_count_datapoints_to_alarm
  statistic                 = "Sum"
  threshold                 = var.tg_high_request_count_threshold
  unit                      = "Count"
  alarm_actions             = var.alarm_sns_topic_arns
  ok_actions                = var.alarm_sns_topic_arns
  insufficient_data_actions = var.alarm_sns_topic_arns
  treat_missing_data        = var.tg_high_request_count_treat_missing_data
  tags                      = var.tags
}

resource "aws_cloudwatch_metric_alarm" "tg_low_request_count" {
  # Only create this alarm if var.tg_low_request_count_threshold is greater than 0.
  count             = var.create_resources && var.tg_low_request_count_threshold > 0 ? 1 : 0
  alarm_name        = "${var.target_group_name}-low-request-count"
  alarm_description = "An alarm that goes off if the number of requests received by the Target Group ${var.target_group_name} goes below the threshold."
  namespace         = "AWS/ApplicationELB"
  metric_name       = "RequestCount"
  dimensions = {
    LoadBalancer = local.load_balancer_dimension_value
    TargetGroup  = local.target_group_dimension_value
  }
  comparison_operator       = "LessThanThreshold"
  evaluation_periods        = var.tg_low_request_count_evaluation_periods
  period                    = var.tg_low_request_count_period
  datapoints_to_alarm       = var.tg_low_request_count_datapoints_to_alarm == null ? var.tg_low_request_count_evaluation_periods : var.tg_low_request_count_datapoints_to_alarm
  statistic                 = "Sum"
  threshold                 = var.tg_low_request_count_threshold
  unit                      = "Count"
  alarm_actions             = var.alarm_sns_topic_arns
  ok_actions                = var.alarm_sns_topic_arns
  insufficient_data_actions = var.alarm_sns_topic_arns
  treat_missing_data        = var.tg_low_request_count_treat_missing_data
  tags                      = var.tags
}

# TargetConnectionErrorCount
# - The most useful statistic is Sum.
resource "aws_cloudwatch_metric_alarm" "tg_high_target_connection_error_count" {
  # Only create this alarm if var.tg_high_target_connection_error_count_threshold is greater than 0.
  count             = var.create_resources && var.tg_high_target_connection_error_count_threshold > 0 ? 1 : 0
  alarm_name        = "${var.target_group_name}-high-target-connection-error-count"
  alarm_description = "An alarm that goess off if the number of connections that were not successfully established between the load balancer and the Target Group ${var.target_group_name} goes above the threshold."
  namespace         = "AWS/ApplicationELB"
  metric_name       = "TargetConnectionErrorCount"
  dimensions = {
    LoadBalancer = local.load_balancer_dimension_value
    TargetGroup  = local.target_group_dimension_value
  }
  comparison_operator       = "GreaterThanThreshold"
  evaluation_periods        = var.tg_high_target_connection_error_count_evaluation_periods
  period                    = var.tg_high_target_connection_error_count_period
  datapoints_to_alarm       = var.tg_high_target_connection_error_count_datapoints_to_alarm == null ? var.tg_high_target_connection_error_count_evaluation_periods : var.tg_high_target_connection_error_count_datapoints_to_alarm
  statistic                 = "Sum"
  threshold                 = var.tg_high_target_connection_error_count_threshold
  unit                      = "Count"
  alarm_actions             = var.alarm_sns_topic_arns
  ok_actions                = var.alarm_sns_topic_arns
  insufficient_data_actions = var.alarm_sns_topic_arns
  treat_missing_data        = var.tg_high_target_connection_error_count_treat_missing_data
  tags                      = var.tags
}

# TargetResponseTime
# - The most useful statistics are Average and pNN.NN (percentiles).
resource "aws_cloudwatch_metric_alarm" "tg_high_target_response_time" {
  # Only create this alarm if var.tg_high_target_response_time_threshold is greater than 0.
  count             = var.create_resources && var.tg_high_target_response_time_threshold > 0 ? 1 : 0
  alarm_name        = "${var.target_group_name}-high-target-response-time"
  alarm_description = "An alarm that goes off if the time elapsed, in seconds, after the request leaves the load balancer until a response from the target in ${var.target_group_name} is received exceeds the threshold. This is equivalent to the target_processing_time field in the ALB access logs."
  namespace         = "AWS/ApplicationELB"
  metric_name       = "TargetResponseTime"
  dimensions = {
    LoadBalancer = local.load_balancer_dimension_value
    TargetGroup  = local.target_group_dimension_value
  }
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = var.tg_high_target_response_time_evaluation_periods
  period              = var.tg_high_target_response_time_period
  datapoints_to_alarm = var.tg_high_target_response_time_datapoints_to_alarm == null ? var.tg_high_target_response_time_evaluation_periods : var.tg_high_target_response_time_datapoints_to_alarm
  statistic           = "Average"

  # TODO: Add support for the extended_statistic property. See https://www.terraform.io/docs/providers/aws/r/cloudwatch_metric_alarm.html#extended_statistic.
  # Note that you cannot specify both "statistic" and "extended statistic".
  # extended_statistic = "p95.0"
  threshold                 = var.tg_high_target_response_time_threshold
  unit                      = "Seconds"
  alarm_actions             = var.alarm_sns_topic_arns
  ok_actions                = var.alarm_sns_topic_arns
  insufficient_data_actions = var.alarm_sns_topic_arns
  treat_missing_data        = var.tg_high_target_response_time_treat_missing_data
  tags                      = var.tags
}

# ---------------------------------------------------------------------------------------------------------------------
# CONVENIENCE VARIABLES
# This section wraps complex Terraform expressions in a nicer construct.
# ---------------------------------------------------------------------------------------------------------------------

locals {
  # Per https://goo.gl/8ih8rP, for the "LoadBalancer" dimension on ALB Metrics, we need to extract "app/ecs-cluster-stage/518523gede75d9f3"
  # from an ALB ARN like "arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/ecs-cluster-stage/518523gede75d9f3"
  load_balancer_dimension_value = replace(split(":", var.alb_arn)[5], "loadbalancer/", "")

  # Per https://goo.gl/8ih8rP, for the "TargetGroup" dimension on ALB Metrics, we need to extract "targetgroup/target-group-name/1234567890123456"
  # from a Target Group ARN like "arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/target-group-name/1234567890123456s"
  target_group_dimension_value = split(":", var.target_group_arn)[5]
}
